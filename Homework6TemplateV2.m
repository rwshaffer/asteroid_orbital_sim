%% AOE 4984 Computer Aided Mission Planning
% Homework 6
% STK - MATLAB Integration
% You are working on designing a Hohmann transfer for a satellite on its
% way to GEO. You are also interested in the power generated by the
% satellite's solar panels. You will interface MATLAB with STK to solve
% this problem.
%
% TEMPLATE
clear
clc;
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Set a file location that you want to use for this work
    %% For example something like this:
    %% 'C:\Users\MY_USERNAME\Documents\STK 12\AOE4984Homework6\'
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
filePath = ''; ???
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Set a scenario file name  that you want to use for this work (don't include the '.sc')
    %% For example something like this:
    %% 'AOE4984Homework6'
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fileName = 'AOE4984Homework6';
try
%%Set Up
    % Access STK scenario for analysis 
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Change the integer value here to match the version of STK you are 
    %% using. It should be 11 or 12.
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    version = 12;
    switch version
        case 11
            versionStr = 'STK11.Application';
        case 12
            versionStr = 'STK12.Application';
            ends
    uiApplication = actxserver(versionStr); 
    uiApplication.UserControl = 1;
    uiApplication.Visible = 1;              % Set equal to zero if you do 
                                            % not want to see the STK window
    root = uiApplication.Personality2;
    try
        %If the scenario file already exisit
        %Load the scenario and get a reference to it
        root.LoadScenario([filePath,fileName,'.sc']);
        scenario = root.CurrentScenario;
    catch
        % Otherwise make a new one
        scenario=root.Children.New('eScenario',fileName);
    end
    % Set the scenario start and stop times
    scenario.StartTime = '1 Oct 2021 00:00:00.000';
%% Question 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Set the scenario stop time to Oct 2, 2021, 00:00:00.000
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    scenario.StopTime = 'Oct 2 2021 00:00:00.000';

    % Rewind the scenario to its starting time
    root.Rewind();
    
    % Set unit preferences
    root.UnitPreferences.Item('DateFormat').SetCurrentUnit('EpSec');    % Set date format to output in epoch seconds

    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Set the preferred units for the power to Watts
    %% Hint: the item is 'Power' and the current units should be 'W'
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    root.UnitPreferences.Item('Power').SetCurrentUnit('W');             % Set power data to ouput in Watts

    % Create a satellite
    solarSat = root.CurrentScenario.Children.New('eSatellite', 'SolarSat');
    
%%Hohmann Transfer
    solarSat.SetPropagatorType('ePropagatorAstrogator');
    
    % Get a reference to Astrogator
    driver = solarSat.Propagator;

    driver.MainSequence.RemoveAll();
    
%%Set the initial state and propagate the initial orbit
    % Insert the initial state into Astrogator
    initState = driver.MainSequence.Insert('eVASegmentTypeInitialState', 'Original Orbit', '-');
    
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Set satellite epoch to the scenario start time
    %% Hint: This can be a string or an STK Object
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    initState.InitialState.Epoch =  scenario.StartTime;

    initState.SetElementType('eVAElementTypeKeplerian');
	keplerian = initState.Element;
	keplerian.PeriapsisRadiusSize = 9000;       % km
	keplerian.ArgOfPeriapsis = 0;               % degree
	keplerian.Eccentricity = 0.05;              % <== NOT CIRCULAR!

    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Set the initial state 'Inclination' to 0 degrees, 'RAAN' to 0 degrees,
    %% and 'TrueAnamoly' to 0 degrees.
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	keplerian.Inclination = 0;                  % degrees
	keplerian.RAAN = 0;                  % degrees
	keplerian.TrueAnomaly = 0;                  % degrees
    
    % Propagate the initial orbit
    propagate = driver.MainSequence.Insert('eVASegmentTypePropagate', 'Propagate', '-');
    propagate.PropagatorName = 'Earth Point Mass';
    % Note on color specification: Hex: 0x00BBGGRR, then convert to int
    propagate.Properties.Color = 16711680; % Blue
    propagate.StoppingConditions.Add('Apoapsis');
    propagate.StoppingConditions.Remove('Duration');
    
%%Circularize the initial orbit
    % Configure target sequece for second maneuver
    ts = driver.MainSequence.Insert('eVASegmentTypeTargetSequence', 'Circularize Initial', '-');
    
    % Insert a maneuver into the target sequence
    dv1 = ts.Segments.Insert('eVASegmentTypeManeuver', 'DV1', '-');

    % Set the maneuver type to impulsive
    dv1.SetManeuverType('eVAManeuverTypeImpulsive');
    impulsive = dv1.Maneuver;

    % Set attitude control to thrust vector
    impulsive.SetAttitudeControlType('eVAAttitudeControlThrustVector');
    thrustVector = impulsive.AttitudeControl;

    % Set thrust vector axes to VNC(Earth)
    thrustVector.ThrustAxesName = 'Satellite/SolarSat VNC(Earth)';

    % Enable X-axis impulse as a control parameter in the manuever sequence
    dv1.EnableControlParameter('eVAControlManeuverImpulsiveCartesianX');

    % Set eccentricity as the result of the maneuver
    dv1.Results.Add('Keplerian Elems/Eccentricity');

    % Get reference to differential corrector
    dc = ts.Profiles.Item('Differential Corrector');
    
    % Set the control parameter for the differential corrector
    xControlParam = dc.ControlParameters.GetControlByPaths('DV1', 'ImpulsiveMnvr.Cartesian.X');
    xControlParam.Enable = true;
    xControlParam.MaxStep = 10;

    % Set the result for the differential corrector
    eccResult = dc.Results.GetResultByPaths('DV1', 'Eccentricity');
    eccResult.Enable = true;
    eccResult.DesiredValue = 0;
    eccResult.Tolerance = 0.001;

    dc.Mode = 'eVAProfileModeIterate';
    ts.Action = 'eVATargetSeqActionRunActiveProfiles';
    
%%Circularized Orbit
    % Propagate the circularized initial orbit
    propagate = driver.MainSequence.Insert('eVASegmentTypePropagate', 'Propagate', '-');
    propagate.PropagatorName = 'Earth Point Mass';
    propagate.Properties.Color = 255; % Red
    propagate.StoppingConditions.Item('Duration').Properties.Trip = 3600;       % s - Time to propagate initial orbit
    
%%Begin Hohmann transfer
    % Configure target sequence for first maneuver of Hohmann transfer
%% Question 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Insert a target type sequence using the
    %% 'eVASegmentTypeTargetSequence' enumeration and name it 'Start
    %% Transfer'
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ts = driver.MainSequence.Insert('eVASegmentTypeManeuver','StartTransfer', '-');

    dv2 = ts.Segments.Insert('eVASegmentTypeManeuver', 'DV2', '-');

    % Insert maneuver into target sequence and target thrust vector
    dv2.SetManeuverType('eVAManeuverTypeImpulsive');
    impulsive = dv2.Maneuver;
    impulsive.SetAttitudeControlType('eVAAttitudeControlThrustVector');
    thrustVector = impulsive.AttitudeControl;
    thrustVector.ThrustAxesName = 'Satellite/SolarSat VNC(Earth)';
    dv2.EnableControlParameter('eVAControlManeuverImpulsiveCartesianX');
    dv2.Results.Add('Keplerian Elems/Radius of Apoapsis');
    
    % Get reference to differential corrector
    dc = ts.Profiles.Item('Differential Corrector');

    % Set the control parameter for the differential corrector
    xControlParam = dc.ControlParameters.GetControlByPaths('DV2', 'ImpulsiveMnvr.Cartesian.X');
    xControlParam.Enable = true;
    xControlParam.MaxStep = 0.3;

    % Set the result for the differential corrector

    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Set the 'Radius Of Apoapsis' as the result for the first Hohmann
    %% maneuver
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    roaResult = dc.Results.GetResultByPaths('DV2', 'Radius Of Apoapsis');

    roaResult.Enable = true;
    roaResult.DesiredValue = 42164;             % km - target apoapsis radius
    roaResult.Tolerance = 0.1;
    
    % Limit number of iterations
    dc.MaxIterations = 50;
    ts.Action = 'eVATargetSeqActionRunActiveProfiles';
    
%%Transfer Orbit
    % Propagate through the transfer orbit
    transferEllipse = driver.MainSequence.Insert('eVASegmentTypePropagate', 'Transfer Ellipse', '-');
    transferEllipse.PropagatorName = 'Earth Point Mass';
    transferEllipse.Properties.Color = 65280; % Green

    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Add a stopping condition to the propagator such that the segment will
    %% terminate at apoapsis.
    %% Hint: Type in 'transferEllipse.StoppingConditions.' to MATLAB's
    %% command window and press tab to see options
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    transferEllipse.StoppingConditions.Add('apoapsis');

    transferEllipse.StoppingConditions.Remove('Duration');
    
%%Circularize to the final target orbit
    % Configure target sequece for second maneuver in Hohmann transfer
    ts = driver.MainSequence.Insert('eVASegmentTypeTargetSequence', 'Finish Transfer', '-');

    dv3 = ts.Segments.Insert('eVASegmentTypeManeuver', 'DV3', '-');
    dv3.SetManeuverType('eVAManeuverTypeImpulsive');
    impulsive = dv3.Maneuver;
    impulsive.SetAttitudeControlType('eVAAttitudeControlThrustVector');
    thrustVector = impulsive.AttitudeControl;
    thrustVector.ThrustAxesName = 'Satellite/SolarSat VNC(Earth)';
    dv3.EnableControlParameter('eVAControlManeuverImpulsiveCartesianX');
    dv3.Results.Add('Keplerian Elems/Eccentricity');
    
    % Get reference to differential corrector
    dc = ts.Profiles.Item('Differential Corrector');

    % Set the control parameter for the differential corrector
    xControlParam = dc.ControlParameters.GetControlByPaths('DV3', 'ImpulsiveMnvr.Cartesian.X');
    xControlParam.Enable = true;
    xControlParam.MaxStep = 0.3;
    
    % Set the result for the differential corrector

    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Set the result for the differential corrector to be 'Eccentricity'
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    eccResult = dc.Results.GetResultByPaths('DV3', 'Eccentricity');

    eccResult.Enable = true;
    eccResult.DesiredValue = 0;
    eccResult.Tolerance = 0.001;

    dc.Mode = 'eVAProfileModeIterate';
    ts.Action = 'eVATargetSeqActionRunActiveProfiles';
    
%%Final orbit propagation
    % Propagate through the final orbit
    outerOrbit = driver.MainSequence.Insert('eVASegmentTypePropagate', 'Final Orbit', '-');

    outerOrbit.Properties.Color = 16711680; % Blue
    outerOrbit.PropagatorName = 'Earth Point Mass';
    outerOrbit.StoppingConditions.Item('Duration').Properties.Trip = 43200; % s - Time to propagate final orbit
    
%%Run Astrogator and report results
    % Run Astrogator and solve the Hohmann transfer
    driver.RunMCS();
    
%% Question 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Grab a reference to the 'Circularize Initial' segment
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    initialDV = driver.MainSequence.Item('Circularize Initial');
    initialDC = initialDV.Profiles.Item('Differential Corrector');
    disp(initialDC.ControlParameters.GetControlByPaths('DV1', 'ImpulsiveMnvr.Cartesian.X').FinalValue);     % Display the magnitude of the initial maneuver to circularise the orbit in km / s
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    
    
    
%% Question 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Grab a reference to the 'Start Transfer' segment
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    startTransfer = driver.MainSequence.Item('1 Oct 2021 00:00:00.000');
    startDC = startTransfer.Profiles.Item('Differential Corrector');
    disp(startDC.ControlParameters.GetControlByPaths('DV2', 'ImpulsiveMnvr.Cartesian.X').FinalValue);       % Display the magnitude of the first Hohmann maneuver in km / s
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    

%% Question 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Grab a reference to the 'Finish Transfer' segment
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    finishTransfer = driver.MainSequence.Item('Finish Transfer');
    finishDC = finishTransfer.Profiles.Item("Differential Corrector");
    disp(finishDC.ControlParameters.GetControlByPaths("DV3", "ImpulsiveMnvr.Cartesian.X").FinalValue);      % Display the magnitude of the second Hohmann maneuver in km / s
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%run Astrogator
    initialDV.ApplyProfiles();
    startTransfer.ApplyProfiles();
    finishTransfer.ApplyProfiles();
    
    % Press any key to continue to data extraction
    pause;

    %% Data extraction
    % Grab solar intensity data
    sIRptElements = {'Time'; 'Solar Flux'; 'Solar Intensity'};                                      % Define desired report elements. Note that regardless of the order specified here, STK will output the variables alphabetically in the retrieved data set
    satSIDP = solarSat.DataProviders.GetDataPrvTimeVarFromPath('SEET Vehicle Temperature');         % Get access to data provider in STK
    satSolarData = satSIDP.ExecElements(scenario.StartTime, scenario.StopTime, 60, sIRptElements);  % Have data provider provide desired report elements
    
    % Grab sun vector data

    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Create a cell array of report elements for 'Time', 'x/Magnitude',
    %% 'y/Magnitude', and 'z/Magnitude'
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    sunVecRptElements = {'Time','x/Magnitude','y/Magnitude','z/Magnitude'};
    satSunVecDP = solarSat.DataProviders.GetDataPrvTimeVarFromPath('Vectors(Body)//Sun');

%% Question 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Extract the sun vector data over the scenario analysis period, at 60 s
    %% intervals.
    %% Hint: There are four inputs (Start Time, Stop Time, Step Size, 
    %%       and the cell array of report elements(e.g., sunVecRptElements)
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    satSunVec = satSunVecDP.ExecElements(scenario.StartTime,scenario.StopTime,60,sunVecRptElements);
    
% Complete data extraction to usable variables
    STKTime = satSolarData.DataSets.Item(0).GetValues();
    sFlux = satSolarData.DataSets.Item(1).GetValues();
    sIntensity = satSolarData.DataSets.Item(2).GetValues();
    
    satSunVector = cell(size(STKTime, 1), 3);

%% Question 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Store the x, y, and z components of the Sun vector into the 1st, 2nd,
    %% and 3rd columns of satSunVector.
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    satSunVector( : , 1) = satSunVec.DataSets.Item(1).GetValues();          % X Component
    satSunVector( : , 2) = satSunVec.DataSets.Item(2).GetValues();          % Y Component
    satSunVector( : , 3) = satSunVec.DataSets.Item(3).GetValues();          % Z Component

catch ErrorMessage
    % Close the STK application if there is an error encountered during data
    % extraction
    root.CloseScenario();
    uiApplication.Quit();
    clear uiApplication root;
    disp(ErrorMessage);
    disp(ErrorMessage.stack);
    return;
end

    % Close STK application
    root.CloseScenario();
    uiApplication.Quit();
    clear uiApplication root;

    % Convert cell arrays to matrices
    STKTime = cell2mat(STKTime);                % s - Time since beginning of scenario
    sIntensity = cell2mat(sIntensity);          % % - Percent of Sun disk visible from satellites current position
    sFlux = cell2mat(sFlux);                    % W m^-2 - Incoming solar flux
    satSunVector = cell2mat(satSunVector);      % Unit vector pointing from satellite to Sun

    n = size(STKTime, 1);                       % Size of STK data arrays

%%Solar Panel Analysis
    % Solar panel parameters
    eff = 0.3;                                  % Panel efficiency
    A = 1;                                      % m^2 - Panel area
    panelVec = [1, 1, 0];                       % Panel normal vecor in body frame

    sunAngleRaw = zeros(n, 1);  % rad - angle from spacecraft surface normal to Sun vector
    sunAngleProc = zeros(n, 1); % rad - angle from spacecraft surface normal to Sun Vector. Angles between 90 and 270 degrees are set to 90 so that they register as zero for the calculations

    % Process sun angle data
    for ii = 1 : n
        sunAngleRaw(ii) = acos(dot(panelVec, satSunVector(ii, : )) / (norm(panelVec) * norm(satSunVector(ii, :))));

        % If the angle between the panel normal and the Sun vector is
        % greater than 90 deg (pi / 2 rad) and less than 270 deg (3 pi / 2
        % rad), then the intensity on the panel should be zero. Set sun
        % angle equal to 90 deg (pi / 2 rad) to achieve this
        if sunAngleRaw(ii) >= pi / 2 && sunAngleRaw(ii) <= 3 * pi / 2
            sunAngleProc(ii) = pi / 2;
        else
            sunAngleProc(ii) = sunAngleRaw(ii);
        end
    end

    % Calculate panel power
    panelPower = eff * A * sFlux .* (sIntensity ./ 100) .* cos(sunAngleProc);

%% Question 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% What is the minimum panel power over the scenario period?
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Plot panel power
    figure();
    plot(STKTime ./ 3600, panelPower);
    xlabel('Time (Hr)')
    ylabel('Panel Power (W)');
    title('Panel Power over Time')

%% Question 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% What is the maximum panel power over the scenario period?
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    disp(max(panelPower));
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%